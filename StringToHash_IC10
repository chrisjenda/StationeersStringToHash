# * Title: String to Hash Generator (Memory Version)
# * Description:
# * Unprecedented, Proof of Concept Script to Showcase String Concatination in Pure IC10
# * Used to Build a List of String Hashes into Memory Dynamically, Like "Pot1-99"
# * Instructions:
# * Name an IC "HashGeneratorIC" and Flash this Script to it
# * Wait for Orange light to Stop Flashing or Status to be 0 on the IC
# * Flash the String Hash Generator Test Script to another IC read its Instructions
# * Status Codes:
# * 1 - Ready for Input
# * 1.1 - Building CRC32 Table
# * 1.2 - Clearing Input String / Reset
# * 1.3 - Building String Hash
# * 1.4 - Hash Output is Ready in IC Status
# * DONT FORGET TO SET ALL -8888 TO db AND FOR (Put) OPCODES REMOVE R0 AND ADD 0 After Com
# Devices (Optional)
# Status Display
# DEBUG
# Init Constants
# 0xFFFFFFFF - Max 32Bit Unsigned Integer
# CRC32 Polynomial
# Start Address of the Input String
# Maximum Length of the Input string ( More than 10 is Untested )
# Update Status
sbn -815193061 2091671594 Setting 1.1 #l.37
# Building CRC32 Table
# Init Hash Generator Status
s db Setting -1 #l.40
# Set Display Mode to Percentage
sbn -815193061 -1678670569 Mode 1 #l.43
# * Change -8888 to db on Line Below
get r0 db 511 #l.46
bne r0 256 35 #l.47
sbn -815193061 2091671594 Setting 0 #l.48
j 61 #l.49
# Populate All 256 Entries of the CRC32 table ( Takes 64 Seconds )
# 9984 Total Line Executions and 77 Internal Yields Totaling 38.5 Seconds
# Debug Output Takes an Extra 512 Lines and 1 second ( 2 Yields )
move r5 0 #l.55
move r4 r5 #l.56
move r7 0 #l.57
and r0 r4 1 #l.58
bne r0 1 46 #l.58
srl r0 r4 1 #l.59
xor r4 r0 3988292384 #l.59
j 47 #l.60
srl r4 r4 1 #l.61
beq r7 7 50 #l.63
add r7 r7 1 #l.63
j 41 #l.63
add r1 r5 200 #l.64
# * put db r1 r4 <- Copy and Paste to Line Below
put db r1 r4 #l.66
# Display Percentage Complete
div r0 r5 255 #l.69
sbn -815193061 -1678670569 Setting r0 #l.69
beq r5 255 59 #l.70
add r5 r5 1 #l.70
j 39 #l.70
# * put db 511 256 <- Copy and Paste to Line Below
put db 511 256 #l.73
# Reset Debug Display
sbn -815193061 -1678670569 Setting 0 #l.77
sbn -815193061 -1678670569 Mode 0 #l.78
# Clear String Memory
j 114 #l.81
yield #l.84
# Status 1 is Build Hash
l r0 db Setting #l.87
bne r0 1 102 #l.87
sbn -815193061 2091671594 Setting 1.3 #l.89
# Building Hash
# Output Requested, Build Hash from String Array
move r2 4294967295 #l.92
move r3 0 #l.93
add r0 20 r3 #l.94
# * Change -8888 to db on Line Below
get r6 db r0 #l.96
bne r6 -1 80 #l.97
j 91 #l.98
xor r0 r2 r6 #l.100
and r1 r0 255 #l.100
# * Change -8888 to db on Line Below
add r0 r1 200 #l.102
get r1 db r0 #l.102
srl r0 r2 8 #l.103
xor r2 r0 r1 #l.103
# yield()
beq r3 10 91 #l.105
add r3 r3 1 #l.105
j 75 #l.105
# Final XOR
xor r2 r2 4294967295 #l.108
# Handle Endianness, Convert to signed 32-bit integer if needed ( May not be needed )
ble r2 2147483647 96 #l.111
sub r2 r2 4294967296 #l.112
sbn -815193061 2091671594 Setting 1.4 #l.115
# Hash Ready
# Output Hash
s db Setting r2 #l.118
# Status 2 is Reset
j 113 #l.87
l r0 db Setting #l.121
bne r0 2 108 #l.121
# Reset Hash Generator
# Clear String Memory
j 114 #l.124
j 113 #l.121
# Status is Idle
# Idle and Wait for Input or Reset
yield #l.129
sbn -815193061 2091671594 Setting 1 #l.130
# Idle
j 66 #l.134
sbn -815193061 2091671594 Setting 1.2 #l.137
# Clearing Mem
move r1 20 #l.138
# * put db r1 0 <- Copy and Paste to Line Below
put db r1 0 #l.140
beq r1 30 122 #l.141
add r1 r1 1 #l.141
j 117 #l.141
# Set Status to Idle
s db Setting 0 #l.143
j 66 #l.144
# Compiled at 2024-09-21 02:17 by Exca's Basic10.
